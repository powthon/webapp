from random import randint, choices#    """ dict-like object for storing a probability distribution #for a specific state """    # Probably better practice to inherit from #MutableMapping but then we'd have to rewrite all 5 of #those methods    # Could we also just have a property like self.dict and #access it that way?class FrequencyGram(dict):    def __init__(self, iterable=None):        super(FrequencyGram, self)#        print(super)        self.tokens = 0 # total for specific window, not entire model        self.types = 0 # total for specific window, not entire model        if iterable:            self.update(iterable)  #      print(iterable)        def update(self, iterable):        # We're only passing single-word strings so no need #to iterate for item in iterable:        if iterable in self:            self[iterable] += 1            self.tokens += 1     #       print(iterable, self)        else:            self[iterable] = 1            self.tokens += 1            self.types += 1    #    print(iterable, self)    def count(self, item):        if item in self:            #print(self[item])            return self[item]        return 0    def return_rand_word(self):        return self.keys()[randint(0, self.types - 1)]    def return_weighted_rand_word(self):            weights = self.create_probability_distribution()   #     print(weights)        return choices(list(self.keys()), weights)[0]    def create_probability_distribution(self):        occurences = self.values()   #     print(occurences)        distribution = []        total = sum(occurences)       # print(total)        for occurence in occurences:                distribution.append(occurence / total)     #   print(self.keys())        return distribution#print(FrequencyGram(dict))