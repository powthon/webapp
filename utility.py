from datetime import datetime as dtfrom main import FrequencyGram, Gen, Scraperdef format_date(dt_, fmt="%m/%d/%Y, %H:%M:%S"):    return f"{dt_:{fmt}}"def now(fmt="%m/%d/%Y, %H:%M:%S"):    return format_date(dt.now(), fmt)def remove_class(element, class_name):    element.element.classList.remove(class_name)def add_class(element, class_name):    element.element.classList.add(class_name)  tasks = []task_template = Element("task-template").select(".task", from_content=True)task_list = Element("list-tasks-container")new_task_content = Element("new-task-content")def add_task(*ags, **kws):    if not new_task_content.element.value:        return None    task_id = f"task-{len(tasks)}"    task = {        "id": task_id,        "content": new_task_content.element.value,        "done": False,        "created_at": dt.now(),    }    tasks.append(task)    task_html = task_template.clone(task_id)    task_html_content = task_html.select("p")    task_html_content.element.innerText = task["content"]    task_html_check = task_html.select("input")    task_list.element.appendChild(task_html.element)    def check_task(evt=None):        task["done"] = not task["done"]        if task["done"]:            add_class(task_html_content, "line-through")        else:            remove_class(task_html_content, "line-through")    new_task_content.clear()    task_html_check.element.onclick = check_taskdef add_task_event(e):    if e.key == "Enter":        add_task()new_task_content.element.onkeypress = add_task_event    